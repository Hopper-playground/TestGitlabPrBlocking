variables:
  HOPPER_API_URL: "https://api.hopper.security"
  # Default configuration
  BLOCK_ON_CRITICAL: "true"
  BLOCK_ON_HIGH: "true"
  BLOCK_ON_MEDIUM: "false"
  BLOCK_ON_LOW: "false"
  MAX_POLLING_ATTEMPTS: "30"
  ARTIFACT_NAME: "hopper-security-scan-results"

stages:
  - security

hopper_security_pr_check:
  image: alpine:latest
  stage: security
  variables:
    # GitLab provides these by default
    REPO_ID: "${CI_PROJECT_ID}"
    REPO_URL: "${CI_PROJECT_URL}"
    BRANCH: "${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    COMMIT_HASH: "${CI_COMMIT_SHA}"
  script:
    - apk add --no-cache curl jq

    # Ensure the script is executable
    - |
      if [ -f "hopper-pr-check.sh" ]; then
        chmod +x hopper-pr-check.sh
      else
        echo "Error: hopper-pr-check.sh script not found in the repository."
        exit 2
      fi

    # Run the Hopper PR check script
    - |
      # Set environment variables for the script
      export API_TOKEN="${HOPPER_API_TOKEN}"
      export BLOCK_ON_CRITICAL="${BLOCK_ON_CRITICAL}"
      export BLOCK_ON_HIGH="${BLOCK_ON_HIGH}"
      export BLOCK_ON_MEDIUM="${BLOCK_ON_MEDIUM}"
      export BLOCK_ON_LOW="${BLOCK_ON_LOW}"
      export MAX_POLLING_ATTEMPTS="${MAX_POLLING_ATTEMPTS}"
      export UPLOAD_RESULTS="true"
      export ARTIFACT_NAME="${ARTIFACT_NAME}"

      # Run the script and capture exit code
      ./hopper-pr-check.sh
      EXIT_CODE=$?

      # Handle exit codes
      # 0: Success - pass
      # 1: Failure - fail
      # 2: Error - pass
      if [ $EXIT_CODE -eq 1 ]; then
        echo "Scan completed but found blocking issues. Failing the job."
        exit 1
      elif [ $EXIT_CODE -eq 2 ]; then
        echo "WARNING! Scan encountered an error, but we're allowing the job to continue."
        sleep 1
      else
        echo "Scan completed successfully with no blocking issues."
      fi

  artifacts:
    name: "${ARTIFACT_NAME}"
    paths:
      - "*.json"  # Match any JSON file to ensure we capture the results
    expire_in: "7 days" # Can be overwritten from the ci
    when: always
