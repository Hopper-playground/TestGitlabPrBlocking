variables:
  HOPPER_API_URL: "https://api.hopper.security"
  # Default configuration
  BLOCK_ON_CRITICAL: "true"
  BLOCK_ON_HIGH: "true"
  BLOCK_ON_MEDIUM: "false"
  BLOCK_ON_LOW: "false"
  MAX_POLLING_ATTEMPTS: "30"
  ARTIFACT_NAME: "hopper-security-scan-results"

stages:
  - security

hopper_security_pr_check:
  image: alpine:latest
  stage: security
  variables:
    # GitLab provides these by default
    REPO_ID: "${CI_PROJECT_ID}"
    REPO_URL: "${CI_PROJECT_URL}"
    BRANCH: "${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    COMMIT_HASH: "${CI_COMMIT_SHA}"
  script:
    - apk add --no-cache curl jq

    # Trigger the scan
    - |
      echo "Triggering Hopper Security PR check"
      SCAN_RESPONSE=$(curl -s -X POST \
        "${HOPPER_API_URL}/v1/pr-checks" \
        -H "Authorization: Bearer ${HOPPER_API_TOKEN}" \
        -H "Content-Type: application/json" \
        -d '{
          "repoId": "'"${REPO_ID}"'",
          "repoUrl": "'"${REPO_URL}"'",
          "branch": "'"${BRANCH}"'",
          "commitHash": "'"${COMMIT_HASH}"'"
        }')
      SCAN_ID=$(echo "$SCAN_RESPONSE" | sed -E 's/.*"([0-9]+)".*/\1/')
      echo "  → Scan ID: ${SCAN_ID}"

      if [[ -z "$SCAN_ID" ]]; then
        echo "ERROR: failed to parse Scan ID from response:"
        echo "  $SCAN_RESPONSE"
        exit 1
      fi

      export SCAN_ID

    # Poll until done running
    - |
      echo "Polling scan status..."
      STATUS="PENDING"
      ATTEMPT=0
      while [[ "$STATUS" != "COMPLETED" && "$STATUS" != "FAILED" && "$STATUS" != "TIMEOUT" && $ATTEMPT -lt $MAX_POLLING_ATTEMPTS ]]; do
        sleep 30
        ATTEMPT=$((ATTEMPT + 1))
        echo "  • Attempt $ATTEMPT/$MAX_POLLING_ATTEMPTS"
        STATUS_RESPONSE=$(curl -s -X GET \
          "${HOPPER_API_URL}/v1/scans/${SCAN_ID}/status" \
          -H "Authorization: Bearer ${HOPPER_API_TOKEN}")
        STATUS=$(echo "$STATUS_RESPONSE" | sed -E 's/.*"status":"([^"]+)".*/\1/')
        echo "    Status: $STATUS"
      done
      if [[ "$STATUS" != "COMPLETED" ]]; then
        echo "WARNING !!! Scan failed, timed out, or exceeded maximum polling attempts"
        exit 0
      fi

    # Fetch scan results
    - |
      echo "Fetching scan results..."
      curl -s -X GET \
        "${HOPPER_API_URL}/v1/scans/${SCAN_ID}" \
        -H "Authorization: Bearer ${HOPPER_API_TOKEN}" \
        -o scan-results.json

    # Decide to fail or pass
    - |
      ISSUE_COUNT=`jq '.projectScanIssues? | length // 0' scan-results.json`
      CRITICAL_COUNT=`jq '[.projectScanIssues[]? | select(.vulnerability.cvss.severity=="CRITICAL")] | length' scan-results.json`
      HIGH_COUNT=`jq '[.projectScanIssues[]? | select(.vulnerability.cvss.severity=="HIGH")] | length' scan-results.json`
      MEDIUM_COUNT=`jq '[.projectScanIssues[]? | select(.vulnerability.cvss.severity=="MEDIUM")] | length' scan-results.json`
      LOW_COUNT=`jq '[.projectScanIssues[]? | select(.vulnerability.cvss.severity=="LOW")] | length' scan-results.json`
      echo "Results: total=$ISSUE_COUNT, critical=$CRITICAL_COUNT, high=$HIGH_COUNT, medium=$MEDIUM_COUNT, low=$LOW_COUNT"

    - |
      SHOULD_FAIL=false
      REASONS=""
      if [ "$BLOCK_ON_CRITICAL" = "true" ] && [ "$CRITICAL_COUNT" -gt 0 ]; then
        SHOULD_FAIL=true
        REASONS="critical"
      fi
      if [ "$BLOCK_ON_HIGH" = "true" ] && [ "$HIGH_COUNT" -gt 0 ]; then
        SHOULD_FAIL=true
        REASONS="$REASONS high"
      fi
      if [ "$BLOCK_ON_MEDIUM" = "true" ] && [ "$MEDIUM_COUNT" -gt 0 ]; then
        SHOULD_FAIL=true
        REASONS="$REASONS medium"
      fi
      if [ "$BLOCK_ON_LOW" = "true" ] && [ "$LOW_COUNT" -gt 0 ]; then
        SHOULD_FAIL=true
        REASONS="$REASONS low"
      fi

      if [ "$SHOULD_FAIL" = "true" ]; then
        echo "✖ PR check failed: Found security issues with severity\n${REASONS[*]}"
        echo "Please fix these issues before merging this PR.\n"
        echo "Critical: ${CRITICAL_COUNT}, High: ${HIGH_COUNT}, Medium: ${MEDIUM_COUNT}, Low: ${LOW_COUNT}\n"
        sleep 1  # Give stdout time to flush
        exit 1
      else
        printf "✔ PR check passed: no blocking issues detected."
        printf "Found ${CRITICAL_COUNT} critical, ${HIGH_COUNT} high, ${MEDIUM_COUNT} medium, and ${LOW_COUNT} low severity issues."
      fi

  artifacts:
    name: "${ARTIFACT_NAME}"
    paths:
      - scan-results.json
    expire_in: "7 days" # Can be overwritten from the ci
    when: always
